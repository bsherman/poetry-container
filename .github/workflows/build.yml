name: build-poetry
on:
  pull_request:
    branches:
      - main
  schedule:
    - cron: '35 21 * * 1'  # 9:35pm UTC each Monday
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
  workflow_dispatch:

env:
  IMAGE_NAME: poetry
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  get_versions:
    name: Get poetry version
    runs-on: ubuntu-latest
    outputs:
      poetry: ${{ steps.poetry.outputs.version }}
    steps:
      - name: Fetch poetry versions
        run: curl "https://release-monitoring.org/api/v2/versions/?project_id=32514" -o poetry.json
      - name: Get poetry version
        id: poetry
        run: echo "version=$(jq -r '.stable_versions[0]' poetry.json)" >> $GITHUB_OUTPUT

  build-image:
    name: Build Poetry Image (${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    needs: get_versions
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
        include:
          - arch: amd64
            runner: ubuntu-24.04
          - arch: arm64
            runner: ubuntu-24.04-arm
        poetry_version:
          - ${{ needs.get_versions.outputs.poetry }}
        python_version:
          - "3.11"
        extra_apt_pkgs:
          - ""
          - "make gcc build-essential dosfstools mtools isolinux mkisofs liblzma-dev syslinux"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Buildah/Podman if needed (for example, install latest buildah)
      - name: Install Buildah
        run: sudo apt-get update && sudo apt-get install -y buildah podman

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          TIMESTAMP="$(date +%Y%m%d)"
          if [[ -z "${{ matrix.extra_apt_pkgs }}" ]]; then
            VARIANT="${{ matrix.poetry_version }}"
          else
            VARIANT="${{ matrix.poetry_version }}-extras"
          fi

          COMMIT_TAGS=()
          BUILD_TAGS=()

          # Add architecture suffix
          ARCH="${{ matrix.arch }}"

          # PR/commit tags
          SHA_SHORT="${GITHUB_SHA::7}"
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            COMMIT_TAGS+=("pr-${{ github.event.number }}-${VARIANT}-${ARCH}")
            COMMIT_TAGS+=("${SHA_SHORT}-${VARIANT}-${ARCH}")
            COMMIT_TAGS+=("pr-${{ github.event.number }}-${ARCH}")
            COMMIT_TAGS+=("${SHA_SHORT}-${ARCH}")
          fi

          # Main branch/version tags
          BUILD_TAGS=("${VARIANT}-${ARCH}")
          for TAG in "${BUILD_TAGS[@]}"; do
              BUILD_TAGS+=("${TAG}-${TIMESTAMP}")
          done

          if [[ -z "${{ matrix.extra_apt_pkgs }}" ]]; then
            BUILD_TAGS+=("${TIMESTAMP}-${ARCH}")
            BUILD_TAGS+=("latest-${ARCH}")
          else
            BUILD_TAGS+=("extras-${TIMESTAMP}-${ARCH}")
            BUILD_TAGS+=("extras-${ARCH}")
          fi

          # Select which tags to use
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Generated the following commit tags: "
              for TAG in "${COMMIT_TAGS[@]}"; do
                  echo "${TAG}"
              done

              alias_tags=("${COMMIT_TAGS[@]}")
          else
              alias_tags=("${BUILD_TAGS[@]}")
          fi

          echo "Generated the following build tags: "
          for TAG in "${BUILD_TAGS[@]}"; do
              echo "${TAG}"
          done

          # Output as space-separated string
          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT

      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.description=A containerized python poetry image
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/main/README.md

      - name: Login to GHCR with podman
        run: podman login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

      - name: Build image with Buildah
        run: |
          buildah bud \
            --arch ${{ matrix.arch }} \
            --build-arg POETRY_VERSION=${{ matrix.poetry_version }} \
            --build-arg PYTHON_VERSION=${{ matrix.python_version }} \
            --build-arg EXTRA_APT_PKGS="${{ matrix.extra_apt_pkgs }}" \
            --label org.opencontainers.image.title=${{ env.IMAGE_NAME }} \
            --label org.opencontainers.image.description="A containerized python poetry image" \
            --label io.artifacthub.package.readme-url="https://raw.githubusercontent.com/${{ github.repository }}/main/README.md" \
            -t ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.poetry_version }}-${{ matrix.arch }} \
            -f Containerfile .

      - name: Push images to GHCR
        run: |
          for tag in ${{ steps.generate-tags.outputs.tags }}; do
            podman push ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:$tag
          done

      - name: Output image ref for manifest
        id: img-ref
        run: echo "ref=${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.poetry_version }}-${{ matrix.arch }}" >> $GITHUB_OUTPUT

  combine-manifest:
    name: Combine manifests
    runs-on: ubuntu-latest
    needs: build-image
    steps:
      - name: Install Podman
        run: sudo apt-get update && sudo apt-get install -y podman

      - name: Login to GHCR
        run: podman login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifest
        env:
          OWNER: ${{ github.repository_owner }}
          IMAGE: poetry
          POETRY_VER: ${{ needs.get_versions.outputs.poetry }}
        run: |
          IMAGE=ghcr.io/$OWNER/$IMAGE
          MANIFEST_TAG=$POETRY_VER

          # Create manifest
          podman manifest create $IMAGE:$MANIFEST_TAG

          # Add both arch images (built by previous jobs)
          podman manifest add $IMAGE:$MANIFEST_TAG docker://$IMAGE:${MANIFEST_TAG}-amd64
          podman manifest add $IMAGE:$MANIFEST_TAG docker://$IMAGE:${MANIFEST_TAG}-arm64

          # Push the manifest to GHCR
          podman manifest push --all $IMAGE:$MANIFEST_TAG docker://$IMAGE:$MANIFEST_TAG

      # Install Cosign
      - uses: sigstore/cosign-installer@v3.0.2

      - name: Sign multi-arch manifest with Cosign
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.manifest.outputs.manifest_ref }}
