name: build-poetry
on:
  pull_request:
    branches:
      - main
  schedule:
    - cron: '35 21 * * 1'  # 9:35pm UTC each Monday
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
  workflow_dispatch:

env:
  IMAGE_NAME: poetry
  REGISTRY: ghcr.io

jobs:
  get-versions:
    name: Get poetry version
    runs-on: ubuntu-latest
    outputs:
      poetry: ${{ steps.poetry.outputs.version }}
    steps:
      - name: Fetch poetry versions
        run: curl "https://release-monitoring.org/api/v2/versions/?project_id=32514" -o poetry.json
      - name: Get poetry version
        id: poetry
        run: echo "version=$(jq -r '.stable_versions[0]' poetry.json)" >> $GITHUB_OUTPUT

  build-image:
    name: Build image (${{ matrix.poetry }}, ${{ matrix.variant }}, ${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    needs: get-versions
    permissions:
      contents: read
      packages: write
      id-token: write
    container:
      image: "ghcr.io/ublue-os/devcontainer:latest"
      options: "--privileged --volume /var/lib/containers:/var/lib/containers --security-opt seccomp=unconfined --security-opt label=disable --user 0:0"
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
        include:
          - arch: amd64
            runner: ubuntu-24.04
          - arch: arm64
            runner: ubuntu-24.04-arm
        poetry:
          - ${{ needs.get-versions.outputs.poetry }}
        python:
          - "3.11"
        variant:
          - "git"
          - "extras"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.description=A containerized python poetry image with ${{ matrix.variant }}
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/main/README.md

      - name: Build Image
        id: build
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./Containerfile
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ matrix.variant }}-${{ matrix.arch }}
          build-args: |
            POETRY_VERSION=${{ matrix.poetry }}
            PYTHON_VERSION=${{ matrix.python }}
            VARIANT=${{ matrix.variant }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Save image info artifact
        run: |
          echo "${{ steps.build.outputs.image-with-tag }}" > image.txt
          echo "${{ steps.meta.outputs.labels }}" > labels.txt
          podman save --format oci-archive ${{ steps.build.outputs.image-with-tag }} | zstd - -o oci.tar.zst

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-${{ matrix.variant }}-${{ matrix.arch }}
          path: |
            image.txt
            labels.txt
            oci.tar.zst

  combine-manifest:
    name: Combine manifests (${{ matrix.poetry }}, ${{ matrix.variant }})
    runs-on: ubuntu-latest
    needs: [get-versions, build-image]
    permissions:
      contents: read
      packages: write
      id-token: write
    container:
      image: "ghcr.io/ublue-os/devcontainer:latest"
      options: "--privileged --volume /var/lib/containers:/var/lib/containers --security-opt seccomp=unconfined --security-opt label=disable --user 0:0"
    strategy:
      fail-fast: false
      matrix:
        poetry:
          - ${{ needs.get-versions.outputs.poetry }}
        variant:
          - "git"
          - "extras"
    steps:
      - name: Download image artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: image-${{ matrix.variant }}-*
          path: images

      - name: Load Images
        run: |
          for oci in images/image-${{ matrix.variant }}-*/oci*.zst; do
            zstd --decompress --stdout "$oci" | podman load
          done
          podman images

      - name: Get timestamp
        id: timestamp
        run: echo "ts=$(date +%Y%m%d)" >> $GITHUB_OUTPUT

      - name: Manifest Metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            # PR tags
            type=ref,event=pr,suffix=-${{ matrix.variant }}
            # SHA tag (short)
            type=sha,format=short,suffix=-${{ matrix.variant }}
            # Only add these tags if it's a push to main or workflow_dispatch on main
            # VARIANT, POETRYVERSION-VARIANT, POETRYVERSION-VARIANT-TIMESTAMP
            ${{ ((github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main') && format('type=raw,value={0}\ntype=raw,value={1}-{0}\ntype=raw,value={1}-{0}-{2}', matrix.variant, matrix.poetry, steps.timestamp.outputs.ts) || '' }}

      - name: Login to registry
        run: podman login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-arch manifest
        shell: bash
        run: |
          set -euo pipefail
          set -x

          # Collect image references fram all arches in artifacts
          ARCH_IMAGES=()
          for imgfile in images/image-${{ matrix.variant }}-*/image.txt; do
            ref=$(cat "$imgfile")
            echo "Found arch image: $ref"
            ARCH_IMAGES+=("$ref")
          done

          # Pick labels.txt from any of the arches in artifacts (identical for all images in each variant)
          LABELS_FILE=$(ls images/image-${{ matrix.variant }}-*/labels.txt | head -n1)
          # Prepare annotation
          ANNOTATIONS=()
          while IFS='=' read -r key value; do
            [ -z "$key" ] && continue
            anno="$key=$value"
            echo "Found annotation: $anno"
            ANNOTATIONS+=("$anno")
          done < "$LABELS_FILE"

          # Collect all tags from metadata
          TAGS=()
          while IFS= read -r line; do
            [ -n "$line" ] && TAGS+=("$line")
          done <<< "${{ steps.meta.outputs.tags }}"
          echo "TAGS: ${TAGS[@]}"
          echo "Number of tags: ${#TAGS[@]}"

          # each tag gets its own manifest
          for MANIFEST_TAG in "${TAGS[@]}"; do
            echo "Creating and pushing manifest for $MANIFEST_TAG"
            MANIFEST_REF="${{ steps.meta.outputs.images }}:$MANIFEST_TAG"
            podman manifest create "$MANIFEST_REF"

            # Add annotations to manifest index
            for label in "${ANNOTATIONS[@]}"; do
                echo "Annotating manifest with label "${label}""
                podman manifest annotate --index --annotation "$label" "$MANIFEST_REF"
            done

            # Add all arch images
            for IMG_REF in "${ARCH_IMAGES[@]}"; do
              podman manifest add "$MANIFEST_REF" "docker://$IMG_REF"
            done
            podman manifest push --all "$MANIFEST_REF" "docker://$MANIFEST_REF"
          done

      # Install Cosign
      - uses: sigstore/cosign-installer@v3.0.2

      - name: Sign multi-arch manifest with Cosign
        if: github.event_name != 'pull_request'
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
        shell: bash
        run: |
          # Collect all tags from metadata
          TAGS=()
          while IFS= read -r line; do
            [ -n "$line" ] && TAGS+=("$line")
          done <<< "${{ steps.meta.outputs.tags }}"
          # each manifest gets signed
          for MANIFEST_TAG in "${TAGS[@]}"; do
            cosign sign -y --key env://COSIGN_PRIVATE_KEY "${{ steps.meta.outputs.images }}:$MANIFEST_TAG"
          done
