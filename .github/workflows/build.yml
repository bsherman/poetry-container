name: build-poetry
on:
  pull_request:
    branches:
      - main
  schedule:
    - cron: '35 21 * * 1'  # 9:35pm UTC each Monday
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
  workflow_dispatch:

env:
  IMAGE_NAME: poetry
  REGISTRY: ghcr.io

jobs:
  get-versions:
    name: Get poetry version
    runs-on: ubuntu-latest
    outputs:
      poetry: ${{ steps.poetry.outputs.version }}
    steps:
      - name: Fetch poetry versions
        run: curl "https://release-monitoring.org/api/v2/versions/?project_id=32514" -o poetry.json
      - name: Get poetry version
        id: poetry
        run: echo "version=$(jq -r '.stable_versions[0]' poetry.json)" >> $GITHUB_OUTPUT

  build-image:
    name: Build image (${{ matrix.poetry }}, ${{ matrix.variant }}, ${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    needs: get-versions
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
        include:
          - arch: amd64
            runner: ubuntu-24.04
          - arch: arm64
            runner: ubuntu-24.04-arm
        poetry:
          - ${{ needs.get-versions.outputs.poetry }}
        python:
          - "3.11"
        variant:
          - "git"
          - "extras"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: meta
        env:
          DESCRIPTION: A containerized python poetry image with ${{ matrix.variant }}
          README: https://raw.githubusercontent.com/${{ github.repository }}/main/README.md
        with:
          images: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          annotations: |
            manifest:org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            manifest:org.opencontainers.image.description=${{ env.DESCRIPTION }}
            manifest:io.artifacthub.package.readme-url=${{ env.README }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.description=${{ env.DESCRIPTION }}
            io.artifacthub.package.readme-url=${{ env.README }}
          tags: |
            type=sha,format=short,suffix=-${{ matrix.variant }}-${{ matrix.arch }}

      - name: Build Image
        id: build
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./Containerfile
          image: ${{ env.IMAGE_NAME }}
          tags: |
            ${{ steps.meta.outputs.tags }}
          build-args: |
            POETRY_VERSION=${{ matrix.poetry }}
            PYTHON_VERSION=${{ matrix.python }}
            VARIANT=${{ matrix.variant }}
          labels: ${{ steps.meta.outputs.labels }}
          oci: false

      - name: Push image to registry
        uses: redhat-actions/push-to-registry@v2
        id: push
        with:
          tags: ${{ steps.build.outputs.tags }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          extra-args: |
            --disable-content-trust

      - name: Write image info artifact
        run: |
          # NOTE: this only works because our metadata creates a single tag for build-image
          echo "${{ steps.build.outputs.tags }}" > image.txt

      - name: Upload image info artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-info-${{ matrix.variant }}-${{ matrix.arch }}
          path: |
            image.txt

  combine-manifest:
    name: Combine manifests (${{ matrix.poetry }}, ${{ matrix.variant }})
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    needs: [get-versions, build-image]
    strategy:
      fail-fast: false
      matrix:
        poetry:
          - ${{ needs.get-versions.outputs.poetry }}
        variant:
          - "git"
          - "extras"
    steps:
      - name: Download image info artifact
        uses: actions/download-artifact@v4
        with:
          pattern: image-info-${{ matrix.variant }}-*
          path: image-info

      - name: Get timestamp
        id: timestamp
        run: echo "ts=$(date +%Y%m%d)" >> $GITHUB_OUTPUT

      - name: Manifest Metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          tags: |
            # PR tags
            type=ref,event=pr,suffix=-${{ matrix.variant }}
            # SHA tag (short)
            type=sha,format=short,suffix=-${{ matrix.variant }}
            # Only add these tags if it's a push to main or workflow_dispatch on main
            # VARIANT, POETRYVERSION-VARIANT, POETRYVERSION-VARIANT-TIMESTAMP
            ${{ ((github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main') && format('type=raw,value={0}\ntype=raw,value={1}-{0}\ntype=raw,value={1}-{0}-{2}', matrix.variant, matrix.poetry, steps.timestamp.outputs.ts) || '' }}

      - name: Login to registry
        run: podman login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-arch manifest
        shell: bash
        run: |
          set -e
          set -x

          # Find the first image.txt
          IMAGE_REF=$(cat image-info/image-info-*/image.txt | head -n1)
          IMAGE="${IMAGE_REF%%:*}"

          # Collect image references for all arches
          ARCH_IMAGES=()
          for imgfile in image-info/image-info-*/image.txt; do
            ref=$(cat "$imgfile")
            echo "Found image: $ref"
            ARCH_IMAGES+=("$ref")
          done

          echo "IMAGE=$IMAGE"
          echo "TAGS=${{ steps.meta.outputs.tags }}"

          IFS=',' read -ra TAGS <<< "${{ steps.meta.outputs.tags }}"
          # each tag gets its own manifest
          for MANIFEST_TAG in "${TAGS[@]}"; do
            echo "Creating and pushing manifest for $MANIFEST_TAG"
            MANIFEST_REF="$IMAGE:$MANFIFEST_TAG"
            podman manifest create "$MANIFEST_REF"

            # Add all arch images
            for ref in "${ARCH_IMAGES[@]}"; do
              podman manifest add $MANIFEST_REF "docker://$ref"
            done

            podman manifest push --all $MANIFEST_REF docker://$MANIFEST_REF
          done

      # Install Cosign
      - uses: sigstore/cosign-installer@v3.0.2

      - name: Sign multi-arch manifest with Cosign
        if: github.event_name != 'pull_request'
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
        run: |
          IMAGE_REF=$(cat image-info/image-info-*/image.txt | head -n1)
          IMAGE="${IMAGE_REF%%:*}"
          # each tag gets its own manifest
          IFS=',' read -ra TAGS <<< "${{ steps.meta.outputs.tags }}"
          for MANIFEST_TAG in "${TAGS[@]}"; do
            cosign sign -y --key env://COSIGN_PRIVATE_KEY $IMAGE:$MANIFEST_TAG
          done
