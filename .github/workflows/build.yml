name: build-poetry
on:
  pull_request:
    branches:
      - main
  schedule:
    - cron: '35 21 * * 1'  # 9:35pm UTC each Monday
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
  workflow_dispatch:

env:
  IMAGE_NAME: poetry
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  get_versions:
    name: Get python and poetry versions
    runs-on: ubuntu-latest
    outputs:
      poetry: ${{ steps.poetry.outputs.version }}
      python: ${{ steps.python.outputs.version }}
    steps:
      # Use cURL to fetch the given URL, saving the response to `data.json`
      - name: Fetch poetry versions
        # Uses project_id from: https://release-monitoring.org/project/32514/
        run: curl "https://release-monitoring.org/api/v2/versions/?project_id=32514" -o poetry.json
      - name: Fetch python versions
        # Uses project_id from: https://release-monitoring.org/project/13254/
        run: curl "https://release-monitoring.org/api/v2/versions/?project_id=13254" -o python.json
      - name: Get poetry version
        id: poetry
        run: echo "version=$(jq -r '.stable_versions[0]' poetry.json)" >> $GITHUB_OUTPUT
      - name: Get python version
        id: python
        run: echo "version=$(jq -r '.stable_versions[0]' python.json)" >> $GITHUB_OUTPUT

  push-ghcr:
    name: Build and push image
    runs-on: ubuntu-22.04
    needs: get_versions
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        poetry_version:
          - ${{ needs.get_versions.outputs.poetry }}
        python_version:
          - ${{ needs.get_versions.outputs.python }}
        extra_apt_pkgs:
          - ""
          - "make gcc build-essential dosfstools mtools isolinux mkisofs"
    steps:
      # Checkout push-to-registry action GitHub repository
      - name: Checkout Push to Registry action
        uses: actions/checkout@v3

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Generate a timestamp for creating an image version history
          TIMESTAMP="$(date +%Y%m%d)"
          if [[ -z "${{ matrix.extra_apt_pkgs }}" ]]; then
            VARIANT="${{ matrix.poetry_version }}"
          else
            VARIANT="${{ matrix.poetry_version }}-extras"
          fi

          COMMIT_TAGS=()
          BUILD_TAGS=()

          # Have tags for tracking builds during pull request
          SHA_SHORT="${GITHUB_SHA::7}"
          COMMIT_TAGS+=("pr-${{ github.event.number }}-${VARIANT}")
          COMMIT_TAGS+=("${SHA_SHORT}-${VARIANT}")

          COMMIT_TAGS+=("pr-${{ github.event.number }}")
          COMMIT_TAGS+=("${SHA_SHORT}")

          BUILD_TAGS=("${VARIANT}")

          # Append matching timestamp tags to keep a version history
          for TAG in "${BUILD_TAGS[@]}"; do
              BUILD_TAGS+=("${TAG}-${TIMESTAMP}")
          done

          if [[ -z "${{ matrix.extra_apt_pkgs }}" ]]; then
            BUILD_TAGS+=("${TIMESTAMP}")
            BUILD_TAGS+=("latest")
          else
            BUILD_TAGS+=("extras-${TIMESTAMP}")
            BUILD_TAGS+=("extras")
          fi

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Generated the following commit tags: "
              for TAG in "${COMMIT_TAGS[@]}"; do
                  echo "${TAG}"
              done

              alias_tags=("${COMMIT_TAGS[@]}")
          else
              alias_tags=("${BUILD_TAGS[@]}")
          fi

          echo "Generated the following build tags: "
          for TAG in "${BUILD_TAGS[@]}"; do
              echo "${TAG}"
          done

          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT

      # Build metadata
      - name: Image Metadata
        uses: docker/metadata-action@v4
        id: meta
        with:
          images: |
             ${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.description=A containerized python poetry image
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/main/README.md

      # Build image using Buildah action
      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./Containerfile
          image: ${{ env.IMAGE_NAME }}
          tags: |
            ${{ steps.generate-tags.outputs.alias_tags }}
          build-args: |
            POETRY_VERSION=${{ matrix.poetry_version }}
            PYTHON_VERSION=${{ matrix.python_version }}
            EXTRA_APT_PKGS=${{ matrix.extra_apt_pkgs }}
          labels: ${{ steps.meta.outputs.labels }}
          oci: false

      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      # Push the image to GHCR (Image Registry)
      - name: Push To GHCR
        uses: redhat-actions/push-to-registry@v2
        id: push
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ${{ steps.registry_case.outputs.lowercase }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          extra-args: |
            --disable-content-trust

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Sign container
      - uses: sigstore/cosign-installer@v3.0.2

      # Only needed when running `cosign sign` using a key

      - name: Sign container image
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ steps.build_image.outputs.image }}@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Echo outputs
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"
