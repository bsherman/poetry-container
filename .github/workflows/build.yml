name: build-poetry
on:
  pull_request:
    branches:
      - main
  schedule:
    - cron: '35 21 * * 1'  # 9:35pm UTC each Monday
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

jobs:
  get-versions:
    name: Get poetry version
    runs-on: ubuntu-latest
    outputs:
      poetry: ${{ steps.poetry.outputs.version }}
    steps:
      - name: Fetch poetry versions
        run: curl "https://release-monitoring.org/api/v2/versions/?project_id=32514" -o poetry.json
      - name: Get poetry version
        id: poetry
        run: echo "version=$(jq -r '.stable_versions[0]' poetry.json)" >> $GITHUB_OUTPUT

  build-image:
    name: Build Poetry ${{ matrix.variant }} (${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    needs: get-versions
    outputs:
      image: ${{ steps.first-image.outputs.image }}
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
        include:
          - arch: amd64
            runner: ubuntu-24.04
          - arch: arm64
            runner: ubuntu-24.04-arm
        poetry_version:
          - ${{ needs.get-versions.outputs.poetry }}
        python_version:
          - "3.11"
        variant:
          - "git"
          - "extras"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Buildah/Podman if needed (for example, install latest buildah)
      - name: Install Buildah
        run: sudo apt-get update && sudo apt-get install -y buildah podman

      - name: Get timestamp
        id: timestamp
        run: echo "ts=$(date +%Y%m%d)" >> $GITHUB_OUTPUT

      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: meta
        env:
          IMAGE: poetry
        with:
          images: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE }}
            org.opencontainers.image.description=A containerized python poetry image with ${{ matrix.variant }}
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/main/README.md

      - name: Set first image as output
        id: first-image
        run: |
          echo "image=$(echo '${{ steps.meta.outputs.images }}' | cut -d',' -f1)" >> $GITHUB_OUTPUT

      - name: Login to registry
        run: podman login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

      - name: Build image with Buildah
        run: |
          LABEL_ARGS=$(echo '${{ steps.meta.outputs.labels }}' | sed 's/^/--label /')
          # shellcheck disable=SC2046
          buildah bud \
            --arch ${{ matrix.arch }} \
            --build-arg POETRY_VERSION=${{ matrix.poetry_version }} \
            --build-arg PYTHON_VERSION=${{ matrix.python_version }} \
            --build-arg VARIANT="${{ matrix.variant }}" \
            $(echo "$LABEL_ARGS") \
            -t ${{ steps.first-image.outputs.image }}:${{ github.sha }}-${{ matrix.variant }}-${{ matrix.arch }} \
            -f Containerfile .

      - name: Push image to registry
        run: |
          podman push ${{ steps.first-image.outputs.image }}:${{ github.sha }}-${{ matrix.variant }}-${{ matrix.arch }}

  combine-manifest:
    name: Combine manifests
    runs-on: ubuntu-latest
    needs: [get-versions, build-image]
    strategy:
      fail-fast: false
      matrix:
        image:
          - ${{ needs.build-image.outputs.image }}
        poetry_version:
          - ${{ needs.get-versions.outputs.poetry }}
        variant:
          - "git"
          - "extras"
    steps:
      - name: Install Podman
        run: sudo apt-get update && sudo apt-get install -y podman

      - name: Get timestamp
        id: timestamp
        run: echo "ts=$(date +%Y%m%d)" >> $GITHUB_OUTPUT

      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          tags: |
            # PR tags
            type=ref,event=pr,suffix=${{ matrix.variant }}
            # SHA tag (short)
            type=sha,format=short,suffix=${{ matrix.variant }}
            # Only add these tags if it's a push to main or workflow_dispatch on main
            # VARIANT, POETRYVERSION-VARIANT, POETRYVERSION-VARIANT-TIMESTAMP
            ${{ ((github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main') && format('type=raw,value={0}\ntype=raw,value={1}-{0}\ntype=raw,value={1}-{0}-{2}', matrix.variant, matrix.poetry_version, steps.timestamp.outputs.ts) || '' }}

      - name: Login to registry
        run: podman login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifests for all tags
        run: |
          IMAGE=${{ matrix.image }}
          BUILD_TAG=${{ github.sha }}-${{ matrix.variant }}

          # each tag gets its own manifest
          for tag in $(echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n'); do
            podman manifest create $IMAGE:$tag

            # Add both arch images (built by previous jobs)
            podman manifest add $IMAGE:$tag docker://$IMAGE:${BUILD_TAG}-amd64
            podman manifest add $IMAGE:$tag docker://$IMAGE:${BUILD_TAG}-arm64

            # Push the manifest to registry
            podman manifest push --all $IMAGE:$tag docker://$IMAGE:$tag
          done

      # Install Cosign
      - uses: sigstore/cosign-installer@v3.0.2

      - name: Sign multi-arch manifest with Cosign
        if: github.event_name != 'pull_request'
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
        run: |
          for tag in $(echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n'); do
            cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ matrix.image }}:$tag
          done
